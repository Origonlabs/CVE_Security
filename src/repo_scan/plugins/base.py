"""
Base plugin class for repo-scan plugins.
"""

from abc import ABC, abstractmethod
from typing import Any, Dict, List, Optional

from ..core.models import Finding, ScanConfig


class BasePlugin(ABC):
    """
    Abstract base class for repo-scan plugins.
    
    Plugins extend the functionality of repo-scan by providing
    custom scanners, post-processors, or integrations.
    """
    
    def __init__(self, name: str, version: str = "1.0.0") -> None:
        """Initialize the plugin."""
        self.name = name
        self.version = version
        self.enabled = True
        self.config = {}
    
    @abstractmethod
    def initialize(self, config: Dict[str, Any]) -> None:
        """
        Initialize the plugin with configuration.
        
        Args:
            config: Plugin configuration dictionary
        """
        pass
    
    @abstractmethod
    def execute(self, scan_config: ScanConfig) -> List[Finding]:
        """
        Execute the plugin's main functionality.
        
        Args:
            scan_config: Current scan configuration
            
        Returns:
            List of findings generated by the plugin
        """
        pass
    
    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        Validate plugin configuration.
        
        Args:
            config: Configuration to validate
            
        Returns:
            True if configuration is valid, False otherwise
        """
        return True
    
    def get_metadata(self) -> Dict[str, Any]:
        """
        Get plugin metadata.
        
        Returns:
            Dictionary with plugin metadata
        """
        return {
            "name": self.name,
            "version": self.version,
            "enabled": self.enabled,
            "description": self.get_description(),
            "author": self.get_author(),
            "license": self.get_license(),
        }
    
    def get_description(self) -> str:
        """Get plugin description."""
        return f"Plugin: {self.name}"
    
    def get_author(self) -> str:
        """Get plugin author."""
        return "Unknown"
    
    def get_license(self) -> str:
        """Get plugin license."""
        return "MIT"
    
    def cleanup(self) -> None:
        """Cleanup plugin resources."""
        pass
    
    def is_available(self) -> bool:
        """
        Check if plugin is available and can be executed.
        
        Returns:
            True if plugin is available, False otherwise
        """
        return True
    
    def get_required_dependencies(self) -> List[str]:
        """
        Get list of required dependencies for this plugin.
        
        Returns:
            List of required dependency names
        """
        return []
    
    def get_optional_dependencies(self) -> List[str]:
        """
        Get list of optional dependencies for this plugin.
        
        Returns:
            List of optional dependency names
        """
        return []
