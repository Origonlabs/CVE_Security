"""
Example custom scanner plugin for repo-scan.
"""

from typing import Any, Dict, List

from ...core.models import Finding, FindingType, ScanConfig, Severity
from ..base import BasePlugin


class CustomScannerPlugin(BasePlugin):
    """
    Example custom scanner plugin that demonstrates how to create
    a custom security scanner for repo-scan.
    """
    
    def __init__(self) -> None:
        """Initialize the custom scanner plugin."""
        super().__init__(
            name="custom-scanner",
            version="1.0.0"
        )
    
    def get_description(self) -> str:
        """Get plugin description."""
        return "Custom security scanner example plugin"
    
    def get_author(self) -> str:
        """Get plugin author."""
        return "Security Team"
    
    def initialize(self, config: Dict[str, Any]) -> None:
        """
        Initialize the plugin with configuration.
        
        Args:
            config: Plugin configuration dictionary
        """
        self.config = config
        
        # Example configuration options
        self.scan_patterns = config.get("scan_patterns", ["*.py", "*.js"])
        self.custom_rules = config.get("custom_rules", [])
        self.severity_threshold = config.get("severity_threshold", "MEDIUM")
    
    def execute(self, scan_config: ScanConfig) -> List[Finding]:
        """
        Execute the custom scanner.
        
        Args:
            scan_config: Current scan configuration
            
        Returns:
            List of findings generated by the plugin
        """
        findings = []
        
        # Example: Scan for hardcoded passwords
        findings.extend(self._scan_hardcoded_passwords(scan_config))
        
        # Example: Scan for debug statements
        findings.extend(self._scan_debug_statements(scan_config))
        
        # Example: Scan for TODO comments with security implications
        findings.extend(self._scan_security_todos(scan_config))
        
        return findings
    
    def _scan_hardcoded_passwords(self, scan_config: ScanConfig) -> List[Finding]:
        """Scan for hardcoded passwords."""
        findings = []
        
        # This is a simplified example - in reality you would scan files
        # and look for patterns like "password = 'secret123'"
        
        # Example finding
        finding = Finding(
            id="custom-hardcoded-password-001",
            scanner=self.name,
            finding_type=FindingType.SAST,
            severity=Severity.HIGH,
            title="Hardcoded Password Detected",
            description="A hardcoded password was found in the source code. This is a security risk as passwords should be stored securely.",
            file_path="src/config.py",
            line_number=42,
            code_snippet="password = 'admin123'",
            confidence=0.9,
            tags=["hardcoded-password", "credential", "security"],
            metadata={
                "rule_id": "CUSTOM001",
                "category": "hardcoded-credentials",
                "remediation": "Use environment variables or secure credential storage"
            }
        )
        
        findings.append(finding)
        return findings
    
    def _scan_debug_statements(self, scan_config: ScanConfig) -> List[Finding]:
        """Scan for debug statements in production code."""
        findings = []
        
        # Example finding
        finding = Finding(
            id="custom-debug-statement-001",
            scanner=self.name,
            finding_type=FindingType.SAST,
            severity=Severity.MEDIUM,
            title="Debug Statement in Production Code",
            description="Debug statements found in production code may leak sensitive information.",
            file_path="src/main.py",
            line_number=15,
            code_snippet="print(f'User data: {user_data}')",
            confidence=0.8,
            tags=["debug", "information-disclosure", "logging"],
            metadata={
                "rule_id": "CUSTOM002",
                "category": "debug-statements",
                "remediation": "Remove debug statements or use proper logging"
            }
        )
        
        findings.append(finding)
        return findings
    
    def _scan_security_todos(self, scan_config: ScanConfig) -> List[Finding]:
        """Scan for TODO comments with security implications."""
        findings = []
        
        # Example finding
        finding = Finding(
            id="custom-security-todo-001",
            scanner=self.name,
            finding_type=FindingType.SAST,
            severity=Severity.LOW,
            title="Security TODO Comment",
            description="TODO comment found that mentions security-related work that should be addressed.",
            file_path="src/auth.py",
            line_number=89,
            code_snippet="# TODO: Implement proper input validation for user authentication",
            confidence=0.7,
            tags=["todo", "security", "improvement"],
            metadata={
                "rule_id": "CUSTOM003",
                "category": "security-todos",
                "remediation": "Address the security TODO comment"
            }
        )
        
        findings.append(finding)
        return findings
    
    def validate_config(self, config: Dict[str, Any]) -> bool:
        """
        Validate plugin configuration.
        
        Args:
            config: Configuration to validate
            
        Returns:
            True if configuration is valid, False otherwise
        """
        # Validate required configuration
        if not isinstance(config.get("scan_patterns", []), list):
            return False
        
        # Validate severity threshold
        valid_severities = ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
        if config.get("severity_threshold") not in valid_severities:
            return False
        
        return True
    
    def get_required_dependencies(self) -> List[str]:
        """Get list of required dependencies."""
        return []  # This plugin doesn't require external dependencies
    
    def is_available(self) -> bool:
        """Check if plugin is available."""
        return True  # This plugin is always available
